Parameters:
  VpcName:
    Description: VPC Name
    Type: String
    Default: myVPC1

  VpcCIDR:
    Description: IP Range (CIDR Notation) for VPC
    Type: String
    Default: 10.10.0.0/16

  # Creating 3 public subnets (Each for different AZ)
  Subnet1CIDR:
    Description: Enter the IP Range (CIDR Notation) for the subnet in AZ 1
    Type: String
    Default: 10.10.1.0/24

  Subnet2CIDR:
    Description: Enter the IP Range (CIDR Notation) for the subnet in AZ 2
    Type: String
    Default: 10.10.2.0/24

  Subnet3CIDR:
    Description: Enter the IP Range (CIDR Notation) for the subnet in AZ 3
    Type: String
    Default: 10.10.3.0/24

  # Creating 3 private subnets (Each for different AZ)
  PrivateSubnet1CIDR:
    Description: Enter the IP Range (CIDR Notation) for the private subnet in AZ 1
    Type: String
    Default: 10.10.4.0/24

  PrivateSubnet2CIDR:
    Description: Enter the IP Range (CIDR Notation) for the private subnet in AZ 2
    Type: String
    Default: 10.10.5.0/24

  PrivateSubnet3CIDR:
    Description: Enter the IP Range (CIDR Notation) for the private subnet in AZ 3
    Type: String
    Default: 10.10.6.0/24

  AMI:
    Description: "AMI for Instance"
    Type: String

  KeyName:
    Description: "Key Name for Instance"
    Type: String

  environment:
    Description: "Environment"
    Type: String
  
  DatabaseUsername:
    NoEcho: 'true'
    Description: Username for mysql database
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Should begin with a letter and contain only alphanumeric characters.

  DatabasePassword:
    NoEcho: 'true'
    Description: Password for mysql database
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Should contain only alphanumeric characters.

  IPv4Cidr:
    Description: AMI ID for instance
    Type: String
    Default: "0.0.0.0/0"

  domainName:
    Description: Domain name for S3 Bucket Naming
    Type: String
    AllowedValues:
      - "amalmathur.me."
      - "dev.amalmathur.me."
      - "demo.amalmathur.me."

  S3BucketName:
    Description: "S3 Bucket Name"
    Type: String
    Default: demo


Resources:
  # Create a VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref VpcName

  # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: InternetGateway
    Properties: 
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create a public route table for the VPC
  RouteTable:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
      - Key: Name
        Value: RouteTable

  # Create a private route table for RDS in this VPC
  PrivateRouteTable:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: PrivateRouteTable

  # Add routes in the route table
  Route:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Add private routes in the private route table
  # PrivateRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: VPCGatewayAttachment
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     GatewayId: !Ref InternetGateway

  # Create a public subnet in AZ 1
  Subnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ''] # AZ 1
      CidrBlock: !Ref Subnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Subnet1

  # Create a public subnet in AZ 2
  Subnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ''] # AZ 2
      CidrBlock: !Ref Subnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Subnet2

  # Create a public subnet in AZ 3
  Subnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ''] # AZ 3
      CidrBlock: !Ref Subnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Subnet3

  
  # Create a private subnet in AZ 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ''] # AZ 1
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnet1

  # Create a private subnet in AZ 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ''] # AZ 2
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnet2

  # Create a private subnet in AZ 3
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ''] # AZ 3
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnet3


  # Associate Route Table with subnet in AZ 1
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  # Associate Route Table with subnet in AZ 2
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2

  # Associate Route Table with subnet in AZ 3
  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet3

  # Associate Private Route Table with Private Subnet in AZ 1
  PrivateSubnet1PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  # Associate Private Route Table with Private Subnet in AZ 2
  PrivateSubnet2PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Associate Private Route Table with Private Subnet in AZ 3
  PrivateSubnet3PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  # Adding a security group - Load Balancer
  LoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LoadBalancerSecurityGroup
      GroupDescription: Security group for Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: !Ref IPv4Cidr
        FromPort: 443
        ToPort: 443
      - IpProtocol: tcp
        CidrIp: !Ref IPv4Cidr
        FromPort: 80
        ToPort: 80

  # Adding a security group - Application
  Application:
   Type: AWS::EC2::SecurityGroup
   Properties:
      GroupDescription: Base Security Group
      # SecurityGroupIngress:
      # - IpProtocol: tcp
      #   FromPort: 22
      #   ToPort: 22
      #   CidrIp: !Ref IPv4Cidr
      # - IpProtocol: tcp
      #   FromPort: 3306
      #   ToPort: 3306
      #   CidrIp: !Ref IPv4Cidr
      # - IpProtocol: tcp
      #   FromPort: 3000
      #   ToPort: 3000
      #   SourceSecurityGroupId: !GetAtt LoadBalancer.GroupId
      VpcId: !Ref VPC

  ApplicationSecurityIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt Application.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt LoadBalancer.GroupId
  
  ApplicationSecurityIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt Application.GroupId
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000
      SourceSecurityGroupId: !GetAtt LoadBalancer.GroupId

  # Adding a DB Security Group - Database
  Database:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Application to access Database
      VpcId: !Ref VPC

  SecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'    
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: 
        Fn::GetAtt:
        - Application
        - GroupId
      GroupId:
        Fn::GetAtt:
        - Database
        - GroupId    

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for mySQL Database
      DBSubnetGroupName: RDS Subnet Group
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      - Ref: PrivateSubnet3

  RDSInstance:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: 50
      Engine: MySQL
      EngineVersion: 8.0.16
      DBInstanceClass: db.t3.micro
      MultiAZ: false
      DBInstanceIdentifier: csye6225
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      DBParameterGroupName: !Ref RDSParameterGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups: 
        - !GetAtt Database.GroupId
      PubliclyAccessible: false
      DBName: csye6225
      Port: 3306

  RDSParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties: 
      Description: CloudFormation MySQL Parameter Group
      Family: mysql8.0
      Parameters:
        sql_mode: IGNORE_SPACE

  # Load Balancer
  LoadBalancerResource:
    DependsOn: VPCGatewayAttachment
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: EC2LoadBalancer
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '60'
      IpAddressType: ipv4
      #Type: Application
      Scheme: internet-facing
      SecurityGroups: 
      - !Ref LoadBalancer
      Subnets:
      - Ref: Subnet1
      - Ref: Subnet2
      - Ref: Subnet3

  # Load Balancer Target
  LoadBalancerTargetGroup:
    DependsOn: LoadBalancerResource
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: EC2TargetGroup
      TargetType: instance
      Port: 3000
      Protocol: 'HTTP'
      VpcId: !Ref VPC
      IpAddressType: ipv4
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: /healthz
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 60
      HealthCheckPort: 3000
      HealthCheckProtocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 20

  # Load Balancer Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancerResource
      Port: 80
      Protocol: HTTP

  # Adding a EC2 Instance
  # EC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: !Ref AMI
  #     KeyName: !Ref KeyName
  #     InstanceType: "t2.micro"
  #     BlockDeviceMappings:
  #       - DeviceName: "/dev/xvda"
  #         Ebs:
  #           VolumeType: "gp2"
  #           DeleteOnTermination: "false"
  #           VolumeSize: "60"
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: "true"
  #         DeleteOnTermination: "true"
  #         SubnetId: !Ref Subnet1
  #         DeviceIndex: "0"
  #         GroupSet: 
  #           - !Ref Application
  #     IamInstanceProfile: !Ref S3Profile
  #     UserData:
  #       Fn::Base64: 
  #         !Sub | 
  #           #!/bin/bash
  #           sed -i '/scripts-user/c\ - [scripts-user, always]' /etc/cloud/cloud.cfg
  #           cd /var/lib/cloud/scripts/per-boot/
  #           touch reload.sh
  #           cat > /var/lib/cloud/scripts/per-boot/reload.sh << 'EOF'
  #             sudo pm2 reload all --update-env
  #           EOF
  #           cat > /etc/environment << 'EOF'
  #           export DB_USER=${DatabaseUsername}
  #           export DB_PASSWORD=${DatabasePassword}
  #           export DB_NAME="csye6225"
  #           export DB_HOST=${RDSInstance.Endpoint.Address}
  #           export AWS_BUCKET_REGION=${AWS::Region}
  #           export AWS_BUCKET_NAME=${S3Bucket}
  #           EOF
  #           source /etc/profile
  #           cd /home/ec2-user/webservice
  #           rm -rf node_modules
  #           sudo npm i
  #           sudo pm2 reload all --update-env


  # Adding Launch Configuration for Auto-Scaling
  LaunchConfiguration:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: asg_launch_template
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 60
            VolumeType: "gp2"
            DeleteOnTermination: true
        ImageId: !Ref AMI
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups: 
              - !GetAtt Application.GroupId
            DeleteOnTermination: true
        IamInstanceProfile:
          Arn: !GetAtt S3Profile.Arn
        UserData:
          Fn::Base64: 
            !Sub | 
              #!/bin/bash
              sed -i '/scripts-user/c\ - [scripts-user, always]' /etc/cloud/cloud.cfg
              cd /var/lib/cloud/scripts/per-boot/
              touch reload.sh
              cat > /var/lib/cloud/scripts/per-boot/reload.sh << 'EOF'
                sudo pm2 reload all --update-env
              EOF
              cat > /etc/environment << 'EOF'
              export DB_USER=${DatabaseUsername}
              export DB_PASSWORD=${DatabasePassword}
              export DB_NAME="csye6225"
              export DB_HOST=${RDSInstance.Endpoint.Address}
              export AWS_BUCKET_REGION=${AWS::Region}
              export AWS_BUCKET_NAME=${S3Bucket}
              EOF
              source /etc/profile
              cd /home/ec2-user/webservice
              rm -rf node_modules
              sudo npm i
              sudo pm2 reload all --update-env
      # Tags:
      #   - Key: Application
      #     Value: CSYE6225-CloudApplication-ASG
      #     PropagateAtLaunch: true
      #   - Key: Name
      #     Value: WebAppAutoScalingGroup
      #     PropagateAtLaunch: true

  # Creating an Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: WebAppAutoScalingGroup
      # AvailabilityZones:
      #   - !Select [ 0, !GetAZs ]
      #   - !Select [ 1, !GetAZs ]
      #   - !Select [ 2, !GetAZs ]
      Cooldown: 60
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchConfiguration
        Version: !GetAtt LaunchConfiguration.LatestVersionNumber
      MinSize: '1'
      MaxSize: '5'
      NewInstancesProtectedFromScaleIn: false
      TargetGroupARNs: 
        - !Ref LoadBalancerTargetGroup
      VPCZoneIdentifier: 
      - !Ref Subnet1
      - !Ref Subnet2
      - !Ref Subnet3
      Tags:
        - Key: Application
          Value: CSYE6225-CloudApplication-ASG
          PropagateAtLaunch: "true"
        - Key: Name
          Value: WebAppAutoScalingGroup
          PropagateAtLaunch: "true"

  # Scale Up
  WebAppScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      #PolicyType: "SimpleScaling"
      Cooldown: "60"
      ScalingAdjustment: 1
      AutoScalingGroupName: !Ref AutoScalingGroup

  # Scale Down
  WebAppScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      #PolicyType: "SimpleScaling"
      Cooldown: "60"
      ScalingAdjustment: -1
      AutoScalingGroupName: !Ref AutoScalingGroup

  # CPU High
  CPUUsageHigh: 
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale up if CPU > 11%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 11
      AlarmActions: 
      - !Ref WebAppScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  # CPU Low
  CPUUsageLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale down if CPU < 9%"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 9
      AlarmActions: 
      - !Ref WebAppScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold

  # DNS Records
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref domainName
      Name: !Ref domainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt 'LoadBalancerResource.CanonicalHostedZoneID'
        DNSName: !GetAtt 'LoadBalancerResource.DNSName'
        EvaluateTargetHealth: false
      

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      BucketName: !Join ['.', [!Select [2, !Split [/, !Ref AWS::StackId ]], !Ref environment, 'amalmathur', 'me']]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: StandardIARule
            Prefix: standard_is
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Ref S3BucketName

  IAMS3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WebAppS3
      Roles: 
        - !Ref IAMS3Role
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:PutObjectAcl
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
              - ec2:RunInstances
              - ec2:AssociateIamInstanceProfile
              - ec2:ReplaceIamInstanceProfileAssociation
              - kms:Decrypt
              - kms:GenerateDataKey
              - s3:ListAllMyBuckets
            Resource:
              - !Sub arn:aws:s3:::${S3Bucket}
              - !Sub arn:aws:s3:::${S3Bucket}/*

  IAMS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EC2-CSYE6225"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /

  S3Profile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles: 
        - Ref: IAMS3Role
        #- !Ref CodeDeployServiceRole

  CodeDeployEC2S3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodeDeploy-EC2-S3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:ListObject"
            Resource:
              - arn:aws:s3:::csye-codedeploy-us-east-1
              - arn:aws:s3:::csye-codedeploy-us-east-1/*
      Roles:
        - !Ref IAMS3Role

  GHUploadToS3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: GH-Upload-To-S3
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - "s3:GetObject"
              - "s3:ListObject"
              - "s3:PutObject"
            Resource:
              - arn:aws:s3:::csye-codedeploy-us-east-1
              - arn:aws:s3:::csye-codedeploy-us-east-1/*
      Users: 
        - ghactions-app

#CodeDeploy IAM Policy
  GHCodeDeploy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: GHCodeDeploy
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "codedeploy:RegisterApplicationRevision"
              - "codedeploy:GetApplicationRevision"
            Resource: !Join ["", ["arn:aws:codedeploy:us-east-1:", !Ref "AWS::AccountId", ":application:", !Ref CodeDeployApplication,],]
          - Effect: Allow
            Action: 
              - "codedeploy:CreateDeployment"
              - "codedeploy:GetDeployment"
            Resource:
              - '*'
          - Effect: Allow
            Action: 
              - codedeploy:GetDeploymentConfig
            Resource:
              - !Join ["",["arn:aws:codedeploy:us-east-1:",!Ref "AWS::AccountId", ":deploymentconfig:CodeDeployDefault.OneAtATime",],]
              - !Join ["",["arn:aws:codedeploy:us-east-1:",!Ref "AWS::AccountId", ":deploymentconfig:CodeDeployDefault.HalfAtATime",],]
              - !Join ["",["arn:aws:codedeploy:us-east-1:",!Ref "AWS::AccountId", ":deploymentconfig:CodeDeployDefault.AllAtOnce",],]
      Users: 
        - ghactions-app

  GHEC2AMI:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: gh-ec2-ami
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Action:
              - ec2:AttachVolume
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CopyImage
              - ec2:CreateImage
              - ec2:CreateKeypair
              - ec2:CreateSecurityGroup
              - ec2:CreateSnapshot
              - ec2:CreateTags
              - ec2:CreateVolume
              - ec2:DeleteKeyPair
              - ec2:DeleteSecurityGroup
              - ec2:DeleteSnapshot
              - ec2:DeleteVolume
              - ec2:DeregisterImage
              - ec2:DescribeImageAttribute
              - ec2:DescribeImages
              - ec2:DescribeInstances
              - ec2:DescribeInstanceStatus
              - ec2:DescribeRegions
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSnapshots
              - ec2:DescribeSubnets
              - ec2:DescribeTags
              - ec2:DescribeVolumes
              - ec2:DetachVolume
              - ec2:GetPasswordData
              - ec2:ModifyImageAttribute
              - ec2:ModifyInstanceAttribute
              - ec2:ModifySnapshotAttribute
              - ec2:RegisterImage
              - ec2:RunInstances
              - ec2:StopInstances
              - ec2:TerminateInstances
            Resource:
              - '*'
      Users: 
        - ghactions-app

  CodeDeployServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Path: "/"

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server
      ApplicationName: csye6225webapp
    
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: CodeDeployApplication
    Properties:
      DeploymentGroupName: csye6225-webapp-deployment
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      AutoScalingGroups: 
        - Ref: AutoScalingGroup
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
          - DEPLOYMENT_FAILURE
      Ec2TagFilters: 
        - Key: Name
          Value: CSYE6225-CloudApplication-ASG
          Type: KEY_AND_VALUE


  CloudWatchAgentPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: "EC2CloudWatchPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
              - 'ec2:DescribeTags'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
            Resource: "*"
          - Effect: Allow
            Action: 
              - 'ssm:GetParameter'
              - 'ssm:PutParameter'
            Resource: "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
      Roles:
        - Ref: IAMS3Role


  SNSService:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: verify_email
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda
      TopicName: verify_email

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:   
        Version: '2008-10-17'
        Id: __default_statement_ID
        Statement:
          - Sid: __default_statement_ID
            Effect: Allow
            Principal: 
              AWS: "*"
            Action:
              - SNS:Publish
              - SNS:DeleteTopic
              - SNS:ListSubscriptionsByTopic
              - SNS:GetTopicAttributes
              - SNS:Receive
              - SNS:AddPermission
              - SNS:Subscribe
            Resource:
              Ref: SNSService
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
          - Sid: __console_pub_0
            Effect: Allow
            Principal: 
              AWS: "*"
            Action: SNS:Publish
            Resource:   
              Ref: SNSService
          - Sid: __console_sub_0
            Effect: Allow
            Principal:  
              AWS: "*"
            Action: 
              - SNS:Subscribe
              - SNS:Receive
            Resource:
              Ref: SNSService
      Topics:
        - Ref: SNSService


  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: 
        Ref: SNSService

  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: emailVerify
      Role: 
        Fn::Join:
          - ''
          - - 'arn:aws:iam::'
            - !Ref AWS::AccountId
            - ":role/"
            - !Ref LambdaRole
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: |
          console.log('In Lambda function');
          exports.handler = function(event, context, callback){
            console.log('Message from SNS');
            var message = event.Records[0].Sns.Message;
            callback(null, "Success");
          };
      Description: Function to store token in dynamoDB and send email to SNS

  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "Email"
          AttributeType: "S"
        - AttributeName: "TokenName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Email"
          KeyType: "HASH"
        - AttributeName: "TokenName"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5
      TableName: csye-6225
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true
      Tags: 
        - Key: Key
          Value: value

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "LambdaFunctionRole"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole


  DynamoDBPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: DynamoDBPolicy
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Action:   
              - 'dynamodb:List*'
              - 'dynamodb:DescribeReservedCapacity*'
              - 'dynamodb:DescribeLimits'
              - 'dynamodb:DescribeTimeToLive'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Get*'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:Delete*'
              - 'dynamodb:CreateTable'
              - 'dynamodb:Update*'
              - 'dynamodb:BatchWrite*'
              - 'dynamodb:DescribeStream'
              - 'dynamodb:BatchGet*'
            Resource: 
              - !GetAtt DynamodbTable.Arn
      Roles:
        - !Ref IAMS3Role

Outputs:
  VpcId:
    Description: The VPC ID 
    Value: !Ref VPC

  SubnetId1:
    Description: The Subnet ID 1 
    Value: !Ref Subnet1

  SubnetId2:
    Description: The Subnet ID 2 
    Value: !Ref Subnet2

  SubnetId3: 
    Description: The Subnet ID 3
    Value: !Ref Subnet3

  InternetGateway:
    Description: Internet Gateway 
    Value: !Ref InternetGateway

  Route:
    Description: Route
    Value: !Ref Route

  RouteTable:
    Description: Route Table
    Value: !Ref RouteTable

  S3Bucket:
    Description: S3-Bucket
    Value: !Ref S3Bucket
